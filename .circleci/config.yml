version: 2.1

# Pipeline parameters
parameters:
  version:
    type: string
    default: "0.0.0"
    description: "Version number for manual builds (e.g., 1.0.0)"

# Import orbs for different platforms
orbs:
  macos: circleci/macos@2.4.1
  win: circleci/windows@5.0

# Include job definitions from separate files
jobs:
  # Parameterized macOS build job
  build-macos:
    parameters:
      arch_name:
        type: string
        description: "Architecture name for package naming (e.g., macAppleSilicon, macIntel)"
      cmake_arch:
        type: string
        default: ""
        description: "CMake architecture parameter (empty for default/arm64, x86_64 for Intel)"
    macos:
      xcode: "16.4.0"
    resource_class: "m4pro.medium"
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      VERSION: << pipeline.parameters.version >>
    steps:
      - checkout
      
      # Set environment based on tag or manual build
      - run:
          name: Set Environment and API URL
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              if [[ "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                # Production tag (e.g., v1.0.0)
                export BUILD_ENV="production"
                export ONESEVENLIVE_API_URL="$PROD_ONESEVENLIVE_API_URL"
              elif [[ "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-stage$ ]]; then
                # Stage tag (e.g., v1.0.0-stage)
                export BUILD_ENV="stage"
                export ONESEVENLIVE_API_URL="$STAGE_ONESEVENLIVE_API_URL"
              else
                # Default to stage for other tags
                export BUILD_ENV="stage"
                export ONESEVENLIVE_API_URL="$STAGE_ONESEVENLIVE_API_URL"
              fi
            else
              # Manual build - default to stage
              export BUILD_ENV="stage"
              export ONESEVENLIVE_API_URL="$STAGE_ONESEVENLIVE_API_URL"
            fi
            
            # Save environment variables for subsequent steps
            echo "export BUILD_ENV=\"$BUILD_ENV\"" >> $BASH_ENV
            echo "export ONESEVENLIVE_API_URL=\"$ONESEVENLIVE_API_URL\"" >> $BASH_ENV

      
      # Install dependencies
      - run:
          name: Install Dependencies
          command: |
            # Install Node.js 20
            brew install node@20
            brew link --force node@20
            
            # Install CMake (ensure version 3.28 or higher)
            # First try to install the latest cmake
            brew install cmake
            
            # Verify CMake version and install specific version if needed
            cmake_version=$(cmake --version | head -n1 | cut -d' ' -f3)
            echo "Installed CMake version: $cmake_version"
            
            # Function to compare versions
            version_compare() {
              local version1=$1
              local version2=$2
              
              # Split versions into arrays
              IFS='.' read -ra V1 \<<< "$version1"
              IFS='.' read -ra V2 \<<< "$version2"
              
              # Compare major, minor, patch
              for i in 0 1 2; do
                local v1=${V1[$i]:-0}
                local v2=${V2[$i]:-0}
                
                if [ "$v1" -gt "$v2" ]; then
                  return 0  # version1 > version2
                elif [ "$v1" -lt "$v2" ]; then
                  return 1  # version1 < version2
                fi
              done
              return 0  # versions are equal
            }
            
            # Check if version is 3.28 or higher
            if ! version_compare "$cmake_version" "3.28"; then
              echo "Current CMake version $cmake_version is less than 3.28"
              echo "Installing CMake 3.28 specifically..."
              
              # Uninstall current cmake and install specific version
              brew uninstall cmake
              
              # Install cmake 3.28 or higher from formula
              # Try to install a specific version that meets requirements
              brew install cmake@3.28 || brew install cmake
              
              # Verify again
              cmake_version=$(cmake --version | head -n1 | cut -d' ' -f3)
              echo "Updated CMake version: $cmake_version"
              
              if ! version_compare "$cmake_version" "3.28"; then
                echo "Error: Unable to install CMake version 3.28 or higher"
                echo "Current version: $cmake_version"
                exit 1
              fi
            fi
            
            echo "CMake version check passed: $cmake_version"
      
      # Setup Node.js and build web components
      - run:
          name: Install and Build Web Components
          command: |
            cd web/ably_chat
            npm install
            npm run build
      
      # Set environment variables and version
      - run:
          name: Set Environment and Version
          command: |
            # Extract version from tag or use default
            if [ -n "$CIRCLE_TAG" ]; then
              version=$(echo "$CIRCLE_TAG" | sed 's/^v//')
            else
              version=${VERSION:-0.0.0}
            fi
            
            # Remove -stage suffix from version number if present
            version_number=$(echo "$version" | sed 's/-stage$//')
            
            # Set package name suffix
            if [ "$BUILD_ENV" = "production" ]; then
              pkg_suffix=""
            else
              pkg_suffix="-stage"
            fi
            
            # Save environment variables for subsequent steps
            echo "export VERSION=\"$version_number\"" >> $BASH_ENV
            echo "export PKG_SUFFIX=\"$pkg_suffix\"" >> $BASH_ENV
            
      
      # Configure CMake
      - run:
          name: CMake Configure
          command: |
            CMAKE_ARGS="-DONESEVENLIVE_API_URL=\"$ONESEVENLIVE_API_URL\" -DCMAKE_PROJECT_VERSION=\"$VERSION\""
            
            # Add architecture parameter if specified
            if [ -n "<< parameters.cmake_arch >>" ]; then
              CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_OSX_ARCHITECTURES=\"<< parameters.cmake_arch >>\""
            fi
            
            eval "cmake --preset macos $CMAKE_ARGS"
      
      # Build the project
      - run:
          name: Build Project
          command: |
            cmake --build --preset macos --config Release
      
      # Import signing certificate if available
      - run:
          name: Import Signing Certificate
          command: |
            if [ -n "$MACOS_CERTIFICATE_BASE64" ] && [ -n "$MACOS_CERTIFICATE_PASSWORD" ]; then
              echo "Importing signing certificate..."
              echo "$MACOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
              
              # Create keychain and import certificate
              security create-keychain -p temp_password temp_keychain
              security default-keychain -s temp_keychain
              security unlock-keychain -p temp_password temp_keychain
              security import certificate.p12 -k temp_keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple: -s -k temp_password temp_keychain
              
              rm certificate.p12
            else
              echo "No signing certificate provided, skipping code signing"
            fi
      
      # Create and sign pkg
      - run:
          name: Create and Sign PKG
          command: |
            # Ensure PKG_SUFFIX is set correctly
            if [ -z "$PKG_SUFFIX" ]; then
              if [ "$BUILD_ENV" = "production" ]; then
                PKG_SUFFIX=""
              else
                PKG_SUFFIX="-stage"
              fi
            fi
            
            PKG_NAME="17liveOBSPlugin-<< parameters.arch_name >>-v${VERSION}${PKG_SUFFIX}.pkg"
            
            pkgbuild --root build_macos/Release \
                     --identifier com.17live.obsplugin \
                     --version "$VERSION" \
                     --install-location "/Applications/OBS.app/Contents/PlugIns" \
                     --scripts package/macOS/misc \
                     "$PKG_NAME"
            
            # Sign the package if certificate is available
            if [ -n "$MACOS_CERTIFICATE_BASE64" ] && [ -n "$MACOS_CERTIFICATE_PASSWORD" ]; then
              productsign --sign "Developer ID Installer" "$PKG_NAME" "${PKG_NAME}.signed"
              mv "${PKG_NAME}.signed" "$PKG_NAME"
            fi
            
            echo "PKG_NAME=$PKG_NAME" >> $BASH_ENV
      
      # Store artifacts
      - run:
          name: Prepare Package for Artifact Storage
          command: |
            ARTIFACT_NAME="17liveOBSPlugin-<< parameters.arch_name >>-v${VERSION}${PKG_SUFFIX}.pkg"
            mkdir -p artifacts
            TARGET_PATH="artifacts/$ARTIFACT_NAME"
            cp "$PKG_NAME" "$TARGET_PATH"
      - store_artifacts:
          path: artifacts
          destination: packages
      
      # Persist package for potential deployment
      - persist_to_workspace:
          root: .
          paths:
            - "artifacts"

  # Windows x64 build job
  build-windows-x64:
    executor:
      name: win/server-2022
      size: medium
    environment:
      VERSION: << pipeline.parameters.version >>
    steps:
      - checkout
      
      # Set environment based on tag
      - run:
          name: Set Environment Variables
          command: |
            # Determine environment based on tag or default to stage
            if ($env:CIRCLE_TAG) {
              if ($env:CIRCLE_TAG -match '^v\d+\.\d+\.\d+$') {
                # Production tag (e.g., v1.0.0)
                $env:BUILD_ENV = "production"
                $env:ONESEVENLIVE_API_URL = $env:PROD_ONESEVENLIVE_API_URL
              } elseif ($env:CIRCLE_TAG -match '^v\d+\.\d+\.\d+-stage$') {
                # Stage tag (e.g., v1.0.0-stage)
                $env:BUILD_ENV = "stage"
                $env:ONESEVENLIVE_API_URL = $env:STAGE_ONESEVENLIVE_API_URL
              } else {
                # Default to stage for other tags
                $env:BUILD_ENV = "stage"
                $env:ONESEVENLIVE_API_URL = $env:STAGE_ONESEVENLIVE_API_URL
              }
            } else {
              # Manual build - default to stage
              $env:BUILD_ENV = "stage"
              $env:ONESEVENLIVE_API_URL = $env:STAGE_ONESEVENLIVE_API_URL
            }
            
            # Save environment variables for subsequent steps
            echo "BUILD_ENV=$env:BUILD_ENV" | Out-File -FilePath $env:BASH_ENV -Encoding utf8 -Append
            echo "ONESEVENLIVE_API_URL=$env:ONESEVENLIVE_API_URL" | Out-File -FilePath $env:BASH_ENV -Encoding utf8 -Append
            
            # Also set as machine-level environment variables for PowerShell sessions
            [Environment]::SetEnvironmentVariable("BUILD_ENV", $env:BUILD_ENV, "Machine")
            [Environment]::SetEnvironmentVariable("ONESEVENLIVE_API_URL", $env:ONESEVENLIVE_API_URL, "Machine")
            
            Write-Host "Environment set to: $env:BUILD_ENV"
            Write-Host "API URL set to: $env:ONESEVENLIVE_API_URL"
      
      
      # Install dependencies
      - run:
          name: Install Dependencies
          command: |
            # Install Node.js
            # choco install nodejs --version=20.11.0 -y
            
            # Install CMake (ensure version 3.28 or higher)
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
            
            # Install NSIS for creating Windows installer
            choco install nsis -y

            # Install Visual Studio Build Tools 2022
            # choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive --locale en-US" -y
            
            # Verify CMake version with improved parsing and comparison
            refreshenv
            
            # Function to compare versions
            function Compare-Version {
                param(
                    [string]$Version1,
                    [string]$Version2
                )
                
                $v1Parts = $Version1.Split('.') | ForEach-Object { [int]$_ }
                $v2Parts = $Version2.Split('.') | ForEach-Object { [int]$_ }
                
                # Ensure both arrays have at least 3 elements (major.minor.patch)
                while ($v1Parts.Count -lt 3) { $v1Parts += 0 }
                while ($v2Parts.Count -lt 3) { $v2Parts += 0 }
                
                for ($i = 0; $i -lt 3; $i++) {
                    if ($v1Parts[$i] -gt $v2Parts[$i]) {
                        return 1  # Version1 > Version2
                    }
                    elseif ($v1Parts[$i] -lt $v2Parts[$i]) {
                        return -1  # Version1 < Version2
                    }
                }
                return 0  # Versions are equal
            }
            
            # Get CMake version with improved parsing
            $cmakeOutput = cmake --version | Select-Object -First 1
            
            # Extract version number using regex (more robust than string splitting)
            if ($cmakeOutput -match 'cmake version (\d+\.\d+\.\d+)') {
                $cmakeVersion = $matches[1]
            } else {
                Write-Error "Unable to parse CMake version from output: $cmakeOutput"
                exit 1
            }
            
            # Check if version is 3.28.0 or higher
            $compareResult = Compare-Version -Version1 $cmakeVersion -Version2 "3.28.0"
            if ($compareResult -lt 0) {
                try {
                    choco upgrade cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
                    refreshenv
                    
                    # Re-check version
                    $cmakeOutput = cmake --version | Select-Object -First 1
                    if ($cmakeOutput -match 'cmake version (\d+\.\d+\.\d+)') {
                        $cmakeVersion = $matches[1]
                        
                        $compareResult = Compare-Version -Version1 $cmakeVersion -Version2 "3.28.0"
                        if ($compareResult -lt 0) {
                            Write-Error "Unable to install CMake version 3.28.0 or higher. Current version: $cmakeVersion"
                            exit 1
                        }
                    } else {
                        Write-Error "Unable to parse updated CMake version"
                        exit 1
                    }
                } catch {
                    Write-Error "Failed to upgrade CMake: $_"
                    exit 1
                }
            }
            
            Write-Host "CMake version check passed: $cmakeVersion"
            
      # Setup Node.js and build web components
      - run:
          name: Install and Build Web Components
          command: |
            cd web/ably_chat
            npm install
            npm run build
      
      # Set environment variables and version
      - run:
          name: Set Environment and Version
          command: |
            # Extract version from tag or use default
            if ($env:CIRCLE_TAG) {
              $version = $env:CIRCLE_TAG -replace '^v', ''
            } else {
              $version = if ($env:VERSION) { $env:VERSION } else { '0.0.0' }
            }
            
            # Remove -stage suffix from version number if present
            $versionNumber = $version -replace '-stage$', ''
            
            # Set package name suffix
            if ($env:BUILD_ENV -eq "production") {
              $pkgSuffix = ""
            } else {
              $pkgSuffix = "-stage"
            }
            
            # Set environment variables for subsequent steps
            echo "VERSION=$versionNumber" | Out-File -FilePath $env:BASH_ENV -Encoding utf8 -Append
            echo "PKG_SUFFIX=$pkgSuffix" | Out-File -FilePath $env:BASH_ENV -Encoding utf8 -Append
            # Also set as machine-level environment variable for PowerShell sessions
            [Environment]::SetEnvironmentVariable("VERSION", $versionNumber, "Machine")
            [Environment]::SetEnvironmentVariable("PKG_SUFFIX", $pkgSuffix, "Machine")
            # Set for current session
            $env:VERSION = $versionNumber
            $env:PKG_SUFFIX = $pkgSuffix
            Write-Host "Set VERSION to: $versionNumber"
            Write-Host "Set PKG_SUFFIX to: $pkgSuffix"
      
      # Configure CMake
      - run:
          name: CMake Configure
          command: |
            cmake --preset windows-x64 -DONESEVENLIVE_API_URL="$env:ONESEVENLIVE_API_URL" -DCMAKE_PROJECT_VERSION="$env:VERSION"
      
      # Build the project
      - run:
          name: Build Project
          command: |
            cmake --build --preset windows-x64 --config Release
      
      # Import signing certificate if available
      - run:
          name: Import Signing Certificate
          command: |
            if ($env:WINDOWS_CERTIFICATE_BASE64 -and $env:WINDOWS_CERTIFICATE_PASSWORD) {
              Write-Host "Importing signing certificate..."
              $certBytes = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE_BASE64)
              [System.IO.File]::WriteAllBytes("certificate.pfx", $certBytes)
              
              # Import certificate to store
              $cert = Import-PfxCertificate -FilePath "certificate.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString $env:WINDOWS_CERTIFICATE_PASSWORD -AsPlainText -Force)
              Write-Host "Certificate imported: $($cert.Thumbprint)"
              
              Remove-Item "certificate.pfx"
            } else {
              Write-Host "No signing certificate provided, skipping code signing"
            }
      
      # Build Windows installer using existing script
      - run:
          name: Build Windows Installer
          shell: powershell
          command: |
            # Set version with suffix for installer name
            $version = "$env:VERSION$env:PKG_SUFFIX"
            Write-Host "Using version with suffix: $version"
            
            # Use the existing build script from package/windows
            cd package/windows
            
            # Run the PowerShell build script directly with version
            pwsh -ExecutionPolicy Bypass -File "build-installer.ps1" -Version $version
            
            # Move the generated installer from output directory to root directory for artifact upload
            $installerPattern = "17liveOBSPlugin-windows-v*.exe"
            if (Test-Path "output") {
              $installerFile = Get-ChildItem -Path "output" -Name $installerPattern | Select-Object -First 1
            } else {
              $installerFile = $null
            }
            if ($installerFile) {
              Move-Item "output/$installerFile" "../../$installerFile"
              echo "INSTALLER_NAME=$installerFile" | Out-File -FilePath $env:BASH_ENV -Encoding utf8 -Append
              # Also set as environment variable for current and subsequent sessions
              [Environment]::SetEnvironmentVariable("INSTALLER_NAME", $installerFile, "Machine")
              $env:INSTALLER_NAME = $installerFile
              Write-Host "Installer built successfully: $installerFile"
            } else {
              Write-Error "Installer file not found in output directory after build"
              exit 1
            }
      

      
      # Sign installer if certificate is available
      - run:
          name: Sign Installer
          command: |
            if ($env:WINDOWS_CERTIFICATE_BASE64 -and $env:WINDOWS_CERTIFICATE_PASSWORD) {
              $installerName = $env:INSTALLER_NAME
              if (-not $installerName -or -not (Test-Path $installerName)) { return }
              $timestampUrl = if ($env:WINDOWS_TIMESTAMP_URL) { $env:WINDOWS_TIMESTAMP_URL } else { "http://timestamp.digicert.com" }
              & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /fd SHA256 /tr $timestampUrl /td SHA256 /a $installerName
            }
      
      # Store artifacts
      - run:
          name: Prepare Installer for Artifact Storage
          command: |
            if ($env:INSTALLER_NAME -and (Test-Path $env:INSTALLER_NAME)) {
              $expectedName = "17liveOBSPlugin-windows-v$env:VERSION$env:PKG_SUFFIX.exe"
              New-Item -ItemType Directory -Path artifacts -Force | Out-Null
              $artifactPath = Join-Path "artifacts" $expectedName
              Copy-Item $env:INSTALLER_NAME $artifactPath -Force
            }
      - store_artifacts:
          path: artifacts
          destination: packages
      
      # Persist installer for potential deployment
      - persist_to_workspace:
          root: .
          paths:
            - "artifacts"

workflows:
  version: 2
  
  # Tag-based build workflow - supports both production and stage builds
  tag-build:
    jobs:
      - build-macos:
          name: build-macos-apple-silicon
          arch_name: "macAppleSilicon"
          cmake_arch: ""
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(-stage)?$/
            branches:
              ignore: /.*/
          context:
            - macos-signing
      - build-macos:
          name: build-macos-intel
          arch_name: "macIntel"
          cmake_arch: "x86_64"
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(-stage)?$/
            branches:
              ignore: /.*/
          context:
            - macos-signing
      - build-windows-x64:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(-stage)?$/
            branches:
              ignore: /.*/
          context:
            - windows-signing
  
  # Manual build workflow for testing (defaults to stage environment)
  manual-build:
    jobs:
      - hold:
          type: approval
      - build-macos:
          name: build-macos-apple-silicon
          arch_name: "macAppleSilicon"
          cmake_arch: ""
          requires:
            - hold
          context:
            - macos-signing
      - build-macos:
          name: build-macos-intel
          arch_name: "macIntel"
          cmake_arch: "x86_64"
          requires:
            - hold
          context:
            - macos-signing
      - build-windows-x64:
          requires:
            - hold
          context:
            - windows-signing